install.packages("hgu133plus2hsentrezgprobe", repos="
http://nugo-r.bioinformatics.nl/2.7/bioc/")
source("http://bioconductor.org/biocLite.R")
biocLite("hgu133plus2.db")
library(hgu133plus2hsentrezg.db)
require(hgu133plus2hsentrezgcdf)
library(hgu133plus2hsentrezgprobe)
utils:::menuInstallLocal()
library(hgu133plus2hsentrezg.db)
require(hgu133plus2hsentrezgcdf)
library(hgu133plus2hsentrezgprobe)
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
q()
source("http://bioconductor.org/biocLite.R")
biocLite("GO.db")
library(WGCNA)
install.packages(WGCNA)
install.packages("WGCNA")
library(WGCNA)
install.packages("GO.db")
install.packages("bioconductor")
source("http://bioconductor.org/biocLite.R")
biocLite()
biolite(GO.db)
bioLite(GO.db)
biocLite(GO.db)
biocLite("GO.db")
q()
library(WGCNA)
q()
q()
q()
q()
library(grplasso)
set.seed(79)
n <- 50  ## observations
p <- 4   ## variables
index <- c(NA, 2, 2, 3, 3)
x <- cbind(1, matrix(rnorm(p * n), nrow = n))
colnames(x) <- c("Intercept", paste("X", 1:4, sep = ""))
x
par <- c(0, 2.1, -1.8, 0, 0)
prob <- 1 / (1 + exp(-x %*% par))
mean(pmin(prob, 1 - prob)) ## Bayes risk
y <- rbinom(n, size = 1, prob = prob) ## binary response vector
mean(pmin(prob, 1 - prob)) ## Bayes risk
y
lambda <- lambdamax(x, y = y, index = index, penscale = sqrt,
model = LogReg()) * 0.5^(0:5)
lambda
## Fit the solution path on the lambda grid
fit <- grplasso(x, y = y, index = index, lambda = lambda, model = LogReg(),
penscale = sqrt,
control = grpl.control(update.hess = "lambda", trace = 0))
q()
library("glmnet")
library("caret")
library("grplasso")
setwd("E:/paper3/lasso")
input1 <- read.table(file = "data_v2.txt", header = TRUE,sep = "\t")
ls()
str(input1)
q()
install.packages("rmarkdown")
setwd("D:/IODS/data")
setwd("D:/IODS-project/data")
data_mat = read.table("student-mat.csv", sep = ",", header = T)
data_por = read.table("student-por.csv", sep = ",", header = T)
data_mat = read.table("student-mat.csv", sep = ",", header = T)
str(data_mat)
dim(data_mat)
head(data_mat)
data_por = read.table("student-por.csv", sep = ",", header = T)
str(data_por)
dim(data_por)
head(data_por)
data_mat = read.table("student-mat.csv", sep = ";", header = T)
str(data_mat)
dim(data_mat)
head(data_mat)
data_por = read.table("student-por.csv", sep = ";", header = T)
str(data_por)
dim(data_por)
head(data_por)
# common columns to use as identifiers
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
# join the two datasets by the selected identifiers
math_por <- inner_join(math, por, by = join_by, suffix=(c(".math",".por")))
# see the new column names
colnames(math_por)
# common columns to use as identifiers
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
# join the two datasets by the selected identifiers
math_por <- inner_join(data_math, data_por, by = join_by, suffix=(c(".math",".por")))
library(dplyr)
# print out the column names of 'math_por'
colnames(math_por)
# create a new data frame with only the joined columns
alc <- select(math_por, one_of(join_by))
# the columns in the datasets which were not used for joining the data
notjoined_columns <- colnames(math)[!colnames(math) %in% join_by]
colnames(math_por)
# create a new data frame with only the joined columns
alc <- select(math_por, one_of(join_by))
# the columns in the datasets which were not used for joining the data
notjoined_columns <- colnames(data_math)[!colnames(data_math) %in% join_by]
notjoined_columns <- colnames(data_mat)[!colnames(data_mat) %in% join_by]
notjoined_columns
for(column_name in notjoined_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- select(math_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- first_column
}
}
# glimpse at the new combined data
glimpse(alc)
math_por
math_por <- inner_join(data_math, data_por, by = join_by, suffix=(c(".math",".por")))
math_por <- inner_join(data_mat, data_por, by = join_by, suffix=(c(".math",".por")))
for(column_name in notjoined_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- select(math_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- first_column
}
}
# see the new column names
colnames(math_por)
# print out the column names of 'math_por'
colnames(math_por)
# create a new data frame with only the joined columns
alc <- select(math_por, one_of(join_by))
notjoined_columns <- colnames(data_mat)[!colnames(data_mat) %in% join_by]
# print out the columns not used for joining
notjoined_columns
# for every column name not used for joining...
for(column_name in notjoined_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- select(math_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- first_column
}
}
# glimpse at the new combined data
glimpse(alc)
alc
dim(alc)
